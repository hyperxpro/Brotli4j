name: Brotli4j CI/CD and Release

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:
    inputs:
      name:
        description: 'Github Actions'
        required: true
        default: 'Github Actions'
      do_release:
        description: 'Release to Maven Central'
        required: false
        type: boolean
        default: false

permissions:
  contents: read

jobs:

  MacOS-x86_64-Build-JDK8:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 8
        uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: 8
          architecture: x64
      - name: Build with Maven
        run: mvn -B --show-version -ntp clean package --file pom.xml
      - name: Upload the build
        uses: actions/upload-artifact@v4
        with:
          name: MacOS-x86_64-Build-JDK8
          path: /Users/runner/work/Brotli4j/

  MacOS-x86_64-Build-JDK11:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: 11
          architecture: x64
      - name: Build with Maven
        run: mvn -B --show-version -ntp --file pom.xml clean package

  MacOS-x86_64-Build-JDK17:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: 17
          architecture: x64
      - name: Build with Maven
        run: mvn -B --show-version -ntp --file pom.xml clean package

  MacOS-x86_64-Build-JDK21:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: 21
          architecture: x64
      - name: Build with Maven
        run: mvn -B --show-version -ntp --file pom.xml clean package

  Linux-x86_64-Build-JDK8:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: build centos6
        run: docker compose -f docker/docker-compose.yml run build
      - name: Upload the build
        uses: actions/upload-artifact@v4
        with:
          name: Linux-x86_64-Build-JDK8
          path: /home/runner/work/Brotli4j/

  Linux-x86_64-Build-JDK11:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: build centos6
        run: docker compose -f docker/docker-compose11.yml run build

  Linux-x86_64-Build-JDK17:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: build centos6
        run: docker compose -f docker/docker-compose17.yml run build

  Linux-x86_64-Build-JDK21:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: build centos6
        run: docker compose -f docker/docker-compose21.yml run build

  Linux-Aarch64-Build-JDK8:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        env:
          cache-name: cache-m2-repository-${{ runner.os }}-jdk8-aarch64
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-pr-${{ env.cache-name }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-pr-${{ env.cache-name }}-
            ${{ runner.os }}-pr-
      - uses: uraimo/run-on-arch-action@v3.0.1
        name: Run commands
        id: runcmd
        with:
          arch: aarch64
          distro: ubuntu18.04
          
          # Not required, but speeds up builds by storing container images in
          # a GitHub package registry.
          githubToken: ${{ github.token }}

          # Mount the .m2/repository
          dockerRunArgs: |
            --platform linux/arm64
            --volume "/home/runner/.m2/repository/:/root/.m2/repository"

          # Install dependencies
          install: |
            apt-get update
            apt-get install -q -y curl gnupg2 autoconf automake libtool make tar git cmake build-essential

            curl -sL https://github.com/shyiko/jabba/raw/master/install.sh | bash && . ~/.jabba/jabba.sh
            jabba install 1.8.0-custom=tgz+https://corretto.aws/downloads/resources/8.352.08.1/amazon-corretto-8.352.08.1-linux-aarch64.tar.gz -o /jdk
          
          run: |
            export JAVA_HOME="/jdk"
            chmod +x ./mvnw
            ./mvnw -B --show-version -ntp clean package

      - name: Upload the build
        uses: actions/upload-artifact@v4
        with:
          name: Linux-Aarch64-Build-JDK8
          path: /home/runner/work/Brotli4j/

  Linux-Aarch64-Build-JDK11:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        env:
          cache-name: cache-m2-repository-${{ runner.os }}-jdk11-aarch64
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-pr-${{ env.cache-name }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-pr-${{ matrix.arch }}-pr-${{ env.cache-name }}-pr-
      - uses: uraimo/run-on-arch-action@v3.0.1
        name: Run commands
        id: runcmd
        with:
          arch: aarch64
          distro: ubuntu18.04

          # Not required, but speeds up builds by storing container images in
          # a GitHub package registry.
          githubToken: ${{ github.token }}

          # Mount the .m2/repository
          dockerRunArgs: |
            --platform linux/arm64
            --volume "/home/runner/.m2/repository/:/root/.m2/repository"

          # Install dependencies
          install: |
            apt-get update
            apt-get install -q -y curl gnupg2 autoconf automake libtool make tar git cmake build-essential

            curl -sL https://github.com/shyiko/jabba/raw/master/install.sh | bash && . ~/.jabba/jabba.sh
            jabba install 11.0.0-custom=tgz+https://corretto.aws/downloads/resources/11.0.17.8.1/amazon-corretto-11.0.17.8.1-linux-aarch64.tar.gz -o /jdk
          
          run: |
            export JAVA_HOME="/jdk"
            chmod +x ./mvnw
            ./mvnw -B --show-version -ntp clean package

  Linux-Aarch64-Build-JDK17:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        env:
          cache-name: cache-m2-repository-${{ runner.os }}-jdk17-aarch64
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-pr-${{ env.cache-name }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-pr-${{ matrix.arch }}-pr-${{ env.cache-name }}-pr-
      - uses: uraimo/run-on-arch-action@v3.0.1
        name: Run commands
        id: runcmd
        with:
          arch: aarch64
          distro: ubuntu18.04

          # Not required, but speeds up builds by storing container images in
          # a GitHub package registry.
          githubToken: ${{ github.token }}

          # Mount the .m2/repository
          dockerRunArgs: |
            --platform linux/arm64
            --volume "/home/runner/.m2/repository/:/root/.m2/repository"

          # Install dependencies
          install: |
            apt-get update
            apt-get install -q -y curl gnupg2 autoconf automake libtool make tar git cmake build-essential

            curl -sL https://github.com/shyiko/jabba/raw/master/install.sh | bash && . ~/.jabba/jabba.sh
            jabba install 17.0.0-custom=tgz+https://corretto.aws/downloads/resources/17.0.5.8.1/amazon-corretto-17.0.5.8.1-linux-aarch64.tar.gz -o /jdk
          
          run: |
            export MAVEN_OPTS="-Djdk.lang.Process.launchMechanism=vfork"
            export JAVA_HOME="/jdk"
            chmod +x ./mvnw
            ./mvnw -B --show-version -ntp clean package

  Linux-Aarch64-Build-JDK21:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        env:
          cache-name: cache-m2-repository-${{ runner.os }}-jdk21-aarch64
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-pr-${{ env.cache-name }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-pr-${{ matrix.arch }}-pr-${{ env.cache-name }}-pr-
      - uses: uraimo/run-on-arch-action@v3.0.1
        name: Run commands
        id: runcmd
        with:
          arch: aarch64
          distro: ubuntu20.04

          # Not required, but speeds up builds by storing container images in
          # a GitHub package registry.
          githubToken: ${{ github.token }}

          # Mount the .m2/repository
          dockerRunArgs: |
            --platform linux/arm64
            --volume "/home/runner/.m2/repository/:/root/.m2/repository"

          # Install dependencies
          install: |
            apt-get update
            apt-get install -q -y curl gnupg2 autoconf automake libtool make tar git cmake build-essential
            
            curl -sL https://github.com/shyiko/jabba/raw/master/install.sh | bash && . ~/.jabba/jabba.sh
            jabba install 21.0.1-custom=tgz+https://corretto.aws/downloads/resources/21.0.1.12.1/amazon-corretto-21.0.1.12.1-linux-aarch64.tar.gz -o /jdk

          run: |
            export MAVEN_OPTS="-Djdk.lang.Process.launchMechanism=vfork"
            export JAVA_HOME="/jdk"
            chmod +x ./mvnw
            ./mvnw -B --show-version -ntp clean package

  Linux-ArmV7-Build-JDK8:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        env:
          cache-name: cache-m2-repository-${{ runner.os }}-jdk8-arm7
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-pr-${{ env.cache-name }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-pr-${{ matrix.arch }}-pr-${{ env.cache-name }}-pr-
      - uses: uraimo/run-on-arch-action@v3.0.1
        name: Run commands
        id: runcmd
        with:
          arch: armv7
          distro: ubuntu18.04

          # Not required, but speeds up builds by storing container images in
          # a GitHub package registry.
          githubToken: ${{ github.token }}

          # Mount the .m2/repository
          dockerRunArgs: |
            --platform linux/arm/v7
            --volume "/home/runner/.m2/repository/:/root/.m2/repository"

          # Install dependencies
          install: |
            apt-get update
            apt-get install -q -y curl gnupg2 autoconf automake libtool make tar git cmake build-essential

            curl -sL https://github.com/shyiko/jabba/raw/master/install.sh | bash && . ~/.jabba/jabba.sh
            jabba install 1.8.0-custom=tgz+https://cdn.azul.com/zulu-embedded/bin/zulu8.66.0.15-ca-jdk8.0.352-linux_aarch32hf.tar.gz -o /jdk
          
          run: |
            export JAVA_HOME="/jdk"
            chmod +x ./mvnw
            ./mvnw -B --show-version -ntp clean package

      - name: Upload the build
        uses: actions/upload-artifact@v4
        with:
          name: Linux-ArmV7-Build-JDK8
          path: /home/runner/work/Brotli4j/

  Linux-ArmV7-Build-JDK11:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        env:
          cache-name: cache-m2-repository-${{ runner.os }}-jdk11-armv7
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-pr-${{ env.cache-name }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-pr-${{ matrix.arch }}-pr-${{ env.cache-name }}-pr-
      - uses: uraimo/run-on-arch-action@v3.0.1
        name: Run commands
        id: runcmd
        with:
          arch: armv7
          distro: ubuntu18.04

          # Not required, but speeds up builds by storing container images in
          # a GitHub package registry.
          githubToken: ${{ github.token }}

          # Mount the .m2/repository
          dockerRunArgs: |
            --platform linux/arm/v7
            --volume "/home/runner/.m2/repository/:/root/.m2/repository"

          # Install dependencies
          install: |
            apt-get update
            apt-get install -q -y curl gnupg2 autoconf automake libtool make tar git cmake build-essential

            curl -sL https://github.com/shyiko/jabba/raw/master/install.sh | bash && . ~/.jabba/jabba.sh
            jabba install 11.0.0-custom=tgz+https://cdn.azul.com/zulu-embedded/bin/zulu11.60.19-ca-jdk11.0.17-linux_aarch32hf.tar.gz -o /jdk

          run: |
            export JAVA_HOME="/jdk"
            chmod +x ./mvnw
            ./mvnw -B --show-version -ntp clean package

  Linux-ArmV7-Build-JDK17:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        env:
          cache-name: cache-m2-repository-${{ runner.os }}-jdk11-armv7
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-pr-${{ env.cache-name }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-pr-${{ matrix.arch }}-pr-${{ env.cache-name }}-pr-
      - uses: uraimo/run-on-arch-action@v3.0.1
        name: Run commands
        id: runcmd
        with:
          arch: armv7
          distro: ubuntu18.04

          # Not required, but speeds up builds by storing container images in
          # a GitHub package registry.
          githubToken: ${{ github.token }}

          # Mount the .m2/repository
          dockerRunArgs: |
            --platform linux/arm/v7
            --volume "/home/runner/.m2/repository/:/root/.m2/repository"

          # Install dependencies
          install: |
            apt-get update
            apt-get install -q -y curl gnupg2 autoconf automake libtool make tar git cmake build-essential apt-transport-https wget
            mkdir -p /etc/apt/keyrings
            wget -O - https://packages.adoptium.net/artifactory/api/gpg/key/public | tee /etc/apt/keyrings/adoptium.asc
            echo "deb [signed-by=/etc/apt/keyrings/adoptium.asc] https://packages.adoptium.net/artifactory/deb $(awk -F= '/^VERSION_CODENAME/{print$2}' /etc/os-release) main" | tee /etc/apt/sources.list.d/adoptium.list
            apt-get update
            apt-get install -y temurin-17-jdk
          run: |
            export JAVA_HOME=/usr/lib/jvm/temurin-17-jdk-armhf
            export PATH="$JAVA_HOME/bin:$PATH"
            export JAVA_INCLUDE_PATH="$JAVA_HOME/include"
            export JAVA_INCLUDE_PATH2="$JAVA_HOME/include/linux"
            export JAVA_AWT_LIBRARY="$JAVA_HOME/lib/arm"
            export JAVA_JVM_LIBRARY="$JAVA_HOME/lib/arm/server"
            export MAVEN_OPTS="-Djdk.lang.Process.launchMechanism=vfork"
            chmod +x ./mvnw
            ./mvnw -B --show-version -ntp clean package

  Linux-s390x-Build-JDK8:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        env:
          cache-name: cache-m2-repository-${{ runner.os }}-jdk8-s390x
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-pr-${{ env.cache-name }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-pr-${{ matrix.arch }}-pr-${{ env.cache-name }}-pr-
      - uses: uraimo/run-on-arch-action@v3.0.1
        name: Run commands
        id: runcmd
        with:
          arch: s390x
          distro: ubuntu18.04

          # Not required, but speeds up builds by storing container images in
          # a GitHub package registry.
          githubToken: ${{ github.token }}

          # Mount the .m2/repository
          dockerRunArgs: |
            --platform linux/s390x
            --volume "/home/runner/.m2/repository/:/root/.m2/repository"

          # Install dependencies
          install: |
            apt-get update
            apt-get install -q -y curl gnupg2 autoconf automake libtool make tar git cmake build-essential openjdk-8-jdk
          
          run: |
            chmod +x ./mvnw
            ./mvnw -B --show-version -ntp clean package

      - name: Upload the build
        uses: actions/upload-artifact@v4
        with:
          name: Linux-s390x-Build-JDK8
          path: /home/runner/work/Brotli4j/

  Linux-s390x-Build-JDK11:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        env:
          cache-name: cache-m2-repository-${{ runner.os }}-jdk8-s390x
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-pr-${{ env.cache-name }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-pr-${{ matrix.arch }}-pr-${{ env.cache-name }}-pr-
      - uses: uraimo/run-on-arch-action@v3.0.1
        name: Run commands
        id: runcmd
        with:
          arch: s390x
          distro: ubuntu18.04

          # Not required, but speeds up builds by storing container images in
          # a GitHub package registry.
          githubToken: ${{ github.token }}

          # Mount the .m2/repository
          dockerRunArgs: |
            --platform linux/s390x
            --volume "/home/runner/.m2/repository/:/root/.m2/repository"

          # Install dependencies
          install: |
            apt-get update
            apt-get install -q -y curl gnupg2 autoconf automake libtool make tar git cmake build-essential openjdk-11-jdk
          run: |
            export JAVA_HOME="/usr/lib/jvm/java-11-openjdk-s390x"
            export PATH="$JAVA_HOME/bin:$PATH"
            export JAVA_INCLUDE_PATH="$JAVA_HOME/include"
            export JAVA_INCLUDE_PATH2="$JAVA_HOME/include/linux"
            export JAVA_AWT_LIBRARY="$JAVA_HOME/lib"
            export JAVA_JVM_LIBRARY="$JAVA_HOME/lib/server"
            chmod +x ./mvnw
            ./mvnw -B --show-version -ntp clean package

  Linux-ppc64le-Build-JDK8:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        env:
          cache-name: cache-m2-repository-${{ runner.os }}-jdk8-ppc64le
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-pr-${{ env.cache-name }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-pr-${{ matrix.arch }}-pr-${{ env.cache-name }}-pr-
      - uses: uraimo/run-on-arch-action@v3.0.1
        name: Run commands
        id: runcmd
        with:
          arch: ppc64le
          distro: ubuntu18.04

          # Not required, but speeds up builds by storing container images in
          # a GitHub package registry.
          githubToken: ${{ github.token }}

          # Mount the .m2/repository
          dockerRunArgs: |
            --platform linux/ppc64le
            --volume "/home/runner/.m2/repository/:/root/.m2/repository"
          # Install dependencies
          install: |
            apt-get update
            apt-get install -q -y curl gnupg2 autoconf automake libtool make tar git cmake build-essential openjdk-8-jdk
          run: |
            export JAVA_HOME="/usr/lib/jvm/java-8-openjdk-ppc64el"
            export PATH="$JAVA_HOME/bin:$PATH"
            export JAVA_INCLUDE_PATH="$JAVA_HOME/include"
            export JAVA_INCLUDE_PATH2="$JAVA_HOME/include/linux"
            export JAVA_AWT_LIBRARY="$JAVA_HOME/lib"
            export JAVA_JVM_LIBRARY="$JAVA_HOME/lib/server"
            chmod +x ./mvnw
            ./mvnw -B -ntp clean package
      - name: Upload the build
        uses: actions/upload-artifact@v4
        with:
          name: Linux-ppc64le-Build-JDK8
          path: /home/runner/work/Brotli4j/

  Linux-ppc64le-Build-JDK11:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        env:
          cache-name: cache-m2-repository-${{ runner.os }}-jdk11-ppc64le
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-pr-${{ env.cache-name }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-pr-${{ matrix.arch }}-pr-${{ env.cache-name }}-pr-
      - uses: uraimo/run-on-arch-action@v3.0.1
        name: Run commands
        id: runcmd
        with:
          arch: ppc64le
          distro: ubuntu18.04

          # Not required, but speeds up builds by storing container images in
          # a GitHub package registry.
          githubToken: ${{ github.token }}

          # Mount the .m2/repository
          dockerRunArgs: |
            --platform linux/ppc64le
            --volume "/home/runner/.m2/repository/:/root/.m2/repository"
          # Install dependencies
          install: |
            apt-get update
            apt-get install -q -y curl gnupg2 autoconf automake libtool make tar git cmake build-essential openjdk-11-jdk
          run: |
            export JAVA_HOME="/usr/lib/jvm/java-11-openjdk-ppc64el"
            export PATH="$JAVA_HOME/bin:$PATH"
            export JAVA_INCLUDE_PATH="$JAVA_HOME/include"
            export JAVA_INCLUDE_PATH2="$JAVA_HOME/include/linux"
            export JAVA_AWT_LIBRARY="$JAVA_HOME/lib"
            export JAVA_JVM_LIBRARY="$JAVA_HOME/lib/server"
            chmod +x ./mvnw
            ./mvnw -B -ntp clean package          

  Linux-riscv64-Build-JDK11:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        env:
          cache-name: cache-m2-repository-${{ runner.os }}-jdk11-riscv64
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-pr-${{ env.cache-name }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-pr-${{ matrix.arch }}-pr-${{ env.cache-name }}-pr-

      - uses: uraimo/run-on-arch-action@v3.0.1
        name: Run commands
        id: runcmd
        with:
          arch: riscv64
          distro: ubuntu20.04

          # Not required, but speeds up builds by storing container images in
          # a GitHub package registry.
          githubToken: ${{ github.token }}

          # Mount the .m2/repository
          dockerRunArgs: |
            --platform linux/riscv64
            --volume "/home/runner/.m2/repository/:/root/.m2/repository"
          # Install dependencies
          install: |
            apt-get update
            apt-get install -q -y curl gnupg2 autoconf automake libtool make tar git cmake build-essential openjdk-11-jdk

          run: |
            export MAVEN_OPTS="-Djdk.lang.Process.launchMechanism=vfork"
            chmod +x ./mvnw
            ./mvnw -B --show-version -ntp clean package

      - name: Upload the build
        uses: actions/upload-artifact@v4
        with:
          name: Linux-riscv64-Build-JDK11
          path: /home/runner/work/Brotli4j/

  Linux-riscv64-Build-JDK17:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        env:
          cache-name: cache-m2-repository-${{ runner.os }}-jdk17-riscv64
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-pr-${{ env.cache-name }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-pr-${{ matrix.arch }}-pr-${{ env.cache-name }}-pr-
      - uses: uraimo/run-on-arch-action@v3.0.1
        name: Run commands
        id: runcmd
        with:
          arch: riscv64
          distro: ubuntu20.04

          # Not required, but speeds up builds by storing container images in
          # a GitHub package registry.
          githubToken: ${{ github.token }}

          # Mount the .m2/repository
          dockerRunArgs: |
            --platform linux/riscv64
            --volume "/home/runner/.m2/repository/:/root/.m2/repository"
          # Install dependencies
          install: |
            apt-get update
            apt-get install -q -y curl gnupg2 autoconf automake libtool make tar git cmake build-essential openjdk-17-jdk
          run: |
            export JAVA_HOME="/usr/lib/jvm/java-17-openjdk-riscv64"
            export PATH="$JAVA_HOME/bin:$PATH"
            export JAVA_INCLUDE_PATH="$JAVA_HOME/include"
            export JAVA_INCLUDE_PATH2="$JAVA_HOME/include/linux"
            export JAVA_AWT_LIBRARY="$JAVA_HOME/lib"
            export JAVA_JVM_LIBRARY="$JAVA_HOME/lib/server"
            export MAVEN_OPTS="-Djdk.lang.Process.launchMechanism=vfork"
            chmod +x ./mvnw
            ./mvnw -B --show-version -ntp clean package

  Linux-riscv64-Build-JDK21:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        env:
          cache-name: cache-m2-repository-${{ runner.os }}-jdk21-riscv64
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-pr-${{ env.cache-name }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-pr-${{ matrix.arch }}-pr-${{ env.cache-name }}-pr-
      - uses: uraimo/run-on-arch-action@v3.0.1
        name: Run commands
        id: runcmd
        with:
          arch: riscv64
          distro: ubuntu22.04

          # Not required, but speeds up builds by storing container images in
          # a GitHub package registry.
          githubToken: ${{ github.token }}

          # Mount the .m2/repository
          dockerRunArgs: |
            --platform linux/riscv64
            --volume "/home/runner/.m2/repository/:/root/.m2/repository"

          # Install dependencies
          install: |
            apt-get update
            apt-get install -q -y curl gnupg2 autoconf automake libtool make tar git cmake build-essential

            curl -sL https://github.com/shyiko/jabba/raw/master/install.sh | bash && . ~/.jabba/jabba.sh
            jabba install 21-custom=tgz+https://api.adoptium.net/v3/binary/latest/21/ea/linux/riscv64/jdk/hotspot/normal/eclipse?project=jdk -o /jdk

          run: |
            export JAVA_HOME="/jdk"
            chmod +x ./mvnw
            ./mvnw -B --show-version -ntp clean package

  Windows-x86_64-Build-JDK8:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 8
        uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: 8
          architecture: x64
      - name: Enable Developer Command Prompt
        uses: ilammy/msvc-dev-cmd@v1.13.0
      - name: Build with Maven
        run: mvn -B --show-version -ntp clean package --file pom.xml
      - name: Upload the build
        uses: actions/upload-artifact@v4
        with:
          name: Windows-x86_64-Build-JDK8
          path: D:\a\Brotli4j\


  Windows-x86_64-Build-JDK11:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: 11
          architecture: x64
      - name: Enable Developer Command Prompt
        uses: ilammy/msvc-dev-cmd@v1.13.0
      - name: Build with Maven
        run: mvn -B --show-version -ntp --file pom.xml clean package

  Windows-x86_64-Build-JDK17:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: 17
          architecture: x64
      - name: Enable Developer Command Prompt
        uses: ilammy/msvc-dev-cmd@v1.13.0
      - name: Build with Maven
        run: mvn -B --show-version -ntp --file pom.xml clean package

  Windows-x86_64-Build-JDK21:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: 21
          architecture: x64
      - name: Enable Developer Command Prompt
        uses: ilammy/msvc-dev-cmd@v1.13.0
      - name: Build with Maven
        run: mvn -B --show-version -ntp --file pom.xml clean package

  Windows-ARM-Build-JDK8:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install ARM64 MSVC Build Tools
        run: |
          choco install visualstudio2022buildtools --no-progress --yes --limit-output
        shell: pwsh
        # Installs ARM64 MSVC toolchain and Windows 11 SDK
      - name: Enable Developer Command Prompt
        uses: ilammy/msvc-dev-cmd@v1.13.0
        with:
          arch: amd64_arm64
      - name: Set up JDK 8
        uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: 8
          architecture: x64
      - name: Build with Maven for ARM64
        run: |
          set "Platform=ARM64"
          mvn -B --show-version -ntp --file pom.xml clean package -Pwindows-aarch64 -DskipTests
      - name: Verify DLL Architecture
        run: |
          dumpbin /headers "natives\windows-aarch64\target\classes\lib\windows-aarch64\brotli.dll" | findstr /C:"machine (ARM64)" || exit /b 1
        shell: cmd
      - name: Upload the build
        uses: actions/upload-artifact@v4
        with:
          name: Windows-ARM-Build-JDK8
          path: D:\a\Brotli4j\

  Release-to-Maven:
    needs:
      - Linux-Aarch64-Build-JDK8
      - Linux-ArmV7-Build-JDK8
      - Linux-ppc64le-Build-JDK8
      - Linux-riscv64-Build-JDK11
      - Linux-s390x-Build-JDK8
      - Linux-x86_64-Build-JDK8
      - MacOS-x86_64-Build-JDK8
      - Windows-ARM-Build-JDK8
      - Windows-x86_64-Build-JDK8
    if: github.event_name == 'workflow_dispatch' && inputs.do_release == true
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-bundle
      - name: Merge all build artifacts into one directory
        run: |
          mkdir -p release-bundle/merged
          cp -rn release-bundle/Linux-Aarch64-Build-JDK8/Brotli4j/* release-bundle/merged/ || true
          cp -rn release-bundle/Linux-ArmV7-Build-JDK8/Brotli4j/* release-bundle/merged/ || true
          cp -rn release-bundle/Linux-ppc64le-Build-JDK8/Brotli4j/* release-bundle/merged/ || true
          cp -rn release-bundle/Linux-riscv64-Build-JDK11/Brotli4j/* release-bundle/merged/ || true
          cp -rn release-bundle/Linux-s390x-Build-JDK8/Brotli4j/* release-bundle/merged/ || true
          cp -rn release-bundle/Linux-x86_64-Build-JDK8/Brotli4j/* release-bundle/merged/ || true
          cp -rn release-bundle/MacOS-x86_64-Build-JDK8/Brotli4j/* release-bundle/merged/ || true
          cp -rn release-bundle/Windows-ARM-Build-JDK8/Brotli4j/* release-bundle/merged/ || true
          cp -rn release-bundle/Windows-x86_64-Build-JDK8/Brotli4j/* release-bundle/merged/ || true
      - name: Set up JDK 8 for deploy
        uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: 8
          architecture: x64
      - name: Remove old Maven Settings
        run: rm -f /home/runner/.m2/settings.xml
      - name: Maven Settings
        uses: s4u/maven-settings-action@v3.1.0
        with:
          servers: |
            [{
              "id": "ossrh",
              "username": "${{ secrets.OSSRH_USERNAME }}",
              "password": "${{ secrets.OSSRH_PASSWORD }}"
            }]
      - name: Import GPG
        uses: crazy-max/ghaction-import-gpg@v6.3.0
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
      - name: Deploy to Maven Central
        run: |
          cd release-bundle/merged
          mvn deploy -ntp -B -Dmaven.main.skip -DskipTests -Dexec.skip
